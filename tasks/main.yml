---

- name: Ensure git is installed 
  ansible.builtin.apt:
    name: git

# Create required folder structure if it does not exist
# Ensuring proper folder structure is set up before cloning
- name: Ensure required folder structure exists
  ansible.builtin.file:
    path: '{{ git_dest_dir | dirname }}'
    state: directory
    recurse: true
    owner: "{{ git_owner | default(omit) }}"
    group: "{{ git_group | default(omit) }}"

# Check if the .git directory exists (i.e., repository is already present)
- name: Check if repository exists
  ansible.builtin.stat:
    path: "{{ git_dest_dir }}/.git"
  register: local_repo

- ansible.builtin.debug:
    msg: "Cloning repository ... [be patient]"  
  when: not local_repo.stat.exists

# Clone repository if it does not already exist
- name: Clone repository if not present
  become: "{{ git_owner is defined }}"
  become_user: "{{ git_owner | default('') }}"
  ansible.builtin.git:
    repo: "{{ git_repo }}"
    dest: "{{ git_dest_dir }}/"
  register: cloned
  when: not local_repo.stat.exists

# Pull the latest changes if the repository exists and actions require pull/checkout
- name: Pull latest changes from the repository
  become: "{{ git_owner is defined }}"
  become_user: "{{ git_owner | default('') }}"
  ansible.builtin.command:
    cmd: git pull
  args:
    chdir: "{{ git_dest_dir }}/"
  when: 
    - local_repo.stat.exists

# Checkout or create branch if needed, then push if required
- name: Handle branch checkout or creation
  ansible.builtin.include_tasks: git_checkout.yml
  when:
    - git_branch is defined
    - local_repo.stat.exists or cloned.changed

# Push changes to the repository
- name: Push local changes to remote
  ansible.builtin.include_tasks: git_push.yml
  when: git_push | default(false)

